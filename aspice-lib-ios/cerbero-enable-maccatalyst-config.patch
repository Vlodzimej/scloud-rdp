diff --git a/config/ios.config b/config/ios.config
index cddc1d43..548be971 100644
--- a/config/ios.config
+++ b/config/ios.config
@@ -15,21 +15,24 @@ variants.override(['nopython', 'notestspackage', 'rust'])
 # used later. System libs are passed through the -isysroot option
 allow_system_libs=False
 
-ios_min_version = ios_min_version or '12.0'
+ios_min_version = ios_min_version or '13.2'
 
 if target_distro_version == distro_version:
     target_distro_version = None
 
 if target_arch in [Architecture.X86, Architecture.X86_64]:
-    ios_platform = 'iPhoneSimulator'
+    ios_platform = 'MacOSX'
 else:
-    ios_platform = 'iPhoneOS'
+    ios_platform = 'MacOSX'
 
 iphone_platform = '/Applications/Xcode.app/Contents/Developer/Platforms/%s.platform/Developer' % ios_platform
 toolchain_path = '%s/usr/bin' % iphone_platform
 
+if target_arch in [Architecture.X86, Architecture.X86_64]:
+    toolchain_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin'
+
 def sdk_location_to_version_array(location):
-    match = re.fullmatch(ios_platform + r'(\d{1,2}\.\d).sdk', location)
+    match = re.fullmatch(ios_platform + r'(\d{1,2}\.?\d?).sdk', location)
     if not match:
         raise FatalError('Could not find SDK version from location: ', location)
     return [int(m.group(1)) for m in re.finditer(r'(\d+)', match.group(1))]
@@ -72,6 +75,10 @@ xcode_version = tuple(int(c) for c in ret.split()[1].split('.'))
 
 sysroot = version_array_to_sdk_location(best_version)
 
+print("======================================================")
+print("sysroot %s arch %s toolchain_path %s" % (sysroot, target_arch, toolchain_path))
+print("======================================================")
+
 ccache = use_ccache and 'ccache ' or ''
 extra_cflags = ''
 extra_ldflags = '-Wno-error=unused-command-line-argument'
@@ -126,14 +133,9 @@ env['NM']= 'nm'
 env['NMEDIT']= 'nmedit'
 env['RANLIB']= 'ranlib'
 env['CPPFLAGS'] = '{} -isysroot {} -isystem {} '.format(arch_cflags, sysroot, includedir)
-if ios_platform == 'iPhoneOS':
-  env['CPPFLAGS'] += '-miphoneos-version-min={} '.format(ios_min_version)
-else:
-  env['CPPFLAGS'] += '-mios-simulator-version-min={} '.format(ios_min_version)
+env['CPPFLAGS'] += '--target=x86_64-apple-ios{0}-macabi -miphoneos-version-min={0} '.format(ios_min_version)
 env['CFLAGS'] = env['CPPFLAGS']
 env['LDFLAGS'] = env['CPPFLAGS'] + ' -L{} '.format(lib_dir)
-if ios_platform == 'iPhoneOS':
-  env['CCASFLAGS'] = '-miphoneos-version-min={} '.format(ios_min_version)
 env['CFLAGS'] += extra_cflags
 env['LDFLAGS'] += extra_ldflags
 env['OBJCFLAGS'] = env['CFLAGS'] + extra_objcflags
@@ -141,14 +143,27 @@ env['OBJLDFLAGS'] = env['LDFLAGS'] + extra_objcflags
 env['CXXFLAGS'] =' -stdlib=libc++ ' +  env['CFLAGS']
 env['OBJCXXFLAGS'] =' -stdlib=libc++ ' +  env['CFLAGS']
 
+if target_arch == Architecture.X86_64:
+    env['CC']= 'clang --target=x86_64-apple-ios{0}-macabi'.format(ios_min_version)
+    env['CXX']= 'clang++ --target=x86_64-apple-ios{0}-macabi'.format(ios_min_version)
+    env['CFLAGS'] += '--target=x86_64-apple-ios{0}-macabi -miphoneos-version-min={0} '.format(ios_min_version)
+    env['LDFLAGS'] += '--target=x86_64-apple-ios{0}-macabi -miphoneos-version-min={0} '.format(ios_min_version)
+    env['CCASFLAGS'] = '--target=x86_64-apple-ios13.2-macabi -miphoneos-version-min={0} '.format(ios_min_version)
+elif target_arch == Architecture.ARM64:
+    env['CC']= 'clang --target=arm64-apple-ios{0}-macabi'.format(ios_min_version)
+    env['CXX']= 'clang++ --target=arm64-apple-ios{0}-macabi'.format(ios_min_version)
+    env['CFLAGS'] += '--target=arm64-apple-ios{0}-macabi -miphoneos-version-min={0} '.format(ios_min_version)
+    env['LDFLAGS'] += '--target=arm64-apple-ios{0}-macabi -miphoneos-version-min={0} '.format(ios_min_version)
+    env['CCASFLAGS'] = '--target=x86_64-apple-ios13.2-macabi -miphoneos-version-min={0} '.format(ios_min_version)
+
 env['AS']= 'as'
 if target_arch in [Architecture.X86, Architecture.X86_64]:
     env.pop('GAS', None)
 else:
     env['GAS']= '%s %s %s' % ('gas-preprocessor.pl', env['CC'], env['CFLAGS'])
 
-
-
+env['GAS']= '%s %s %s -fembed-bitcode' % ('gas-preprocessor.pl', env['CC'], env['CFLAGS'])
+ 
 if use_ccache:
     env['CC'] = 'ccache  %s' % env['CC']
     env['CXX'] = 'ccache  %s' % env['CXX']
@@ -163,3 +178,7 @@ env['ac_cv_tls'] = 'none'
 env['gl_cv_func_getcwd_abort_bug'] = 'no'
 
 moltenvk_prefix = os.path.join(home_dir, 'moltenvk')
+
+print("======================================================")
+print(env)
+print("======================================================")
\ No newline at end of file
